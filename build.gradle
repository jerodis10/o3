buildscript {
	ext {
		springBootVersion = '2.7.15'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
	}
}

def javaProjects = [
		project(':o3-api'),
		project(':o3-core'),
		project(':o3-common')
]

def JPAProjects = [
		project(':o3-core'),
		project(':o3-common')
]


configure(javaProjects) {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.sonarqube'
	apply plugin: 'jacoco'

	group = 'com.o3'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '11'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation "org.assertj:assertj-core:3.20.2"
	}

	test {
		useJUnitPlatform()
		finalizedBy 'jacocoTestReport'
	}

	sonarqube {
		properties {
			property "sonar.projectKey", "money"
			property "sonar.token", "sqp_c4d8fa2e64d75fd68be4076c7c3cc5a98d16d793"
			property "sonar.host.url", "http://localhost:9000"

			property "sonar.sources", "src"
			property "sonar.language", "java"
			property "sonar.sourceEncoding", "UTF-8"
			property "sonar.profile", "Sonar way"
			property "sonar.java.binaries", "${buildDir}/classes"
			property "sonar.test.inclusions", "**/*Test.java"
			property "sonar.exclusions", "**/resources/static/**, **/Q*.class, **/test/**"
			property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
		}
	}


	jacoco {
		toolVersion = '0.8.7'
	}

	jacocoTestReport {
		reports {
			html.required = true
			xml.required = true
			csv.required = false
		}
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				enabled = true
				element = 'CLASS'

				limit {
					counter = 'BRANCH'
					value = 'COVEREDRATIO'
					minimum = 0.50
				}

				limit {
					counter = 'LINE'
					value = 'COVEREDRATIO'
					minimum = 0.80
				}

				limit {
					counter = 'LINE'
					value = 'TOTALCOUNT'
					maximum = 300
				}

				excludes = []
			}
		}
	}

	task testCoverage(type: Test) {
		group 'verification'
		description 'Runs the unit tests with coverage'

		dependsOn(':test',
				':jacocoTestReport',
				':jacocoTestCoverageVerification')

		tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
		tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
	}
}


configure(JPAProjects) {
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	}
}